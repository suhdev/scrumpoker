[{"D:\\Code\\scrumpoker\\src\\index.tsx":"1","D:\\Code\\scrumpoker\\src\\reportWebVitals.ts":"2","D:\\Code\\scrumpoker\\src\\App.tsx":"3","D:\\Code\\scrumpoker\\src\\init.tsx":"4","D:\\Code\\scrumpoker\\src\\auth\\context.tsx":"5","D:\\Code\\scrumpoker\\src\\login\\index.tsx":"6","D:\\Code\\scrumpoker\\src\\firebase\\index.tsx":"7","D:\\Code\\scrumpoker\\src\\usersList\\index.tsx":"8","D:\\Code\\scrumpoker\\src\\usersList\\userListModel.tsx":"9","D:\\Code\\scrumpoker\\src\\layout\\index.tsx":"10","D:\\Code\\scrumpoker\\src\\retro\\index.tsx":"11","D:\\Code\\scrumpoker\\src\\scrumPoker\\index.tsx":"12","D:\\Code\\scrumpoker\\src\\scrumPoker\\scrumPokerModel.ts":"13","D:\\Code\\scrumpoker\\src\\scrumPoker\\constants.ts":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":6373,"mtime":1611194090153,"results":"18","hashOfConfig":"16"},{"size":248,"mtime":1611188531481,"results":"19","hashOfConfig":"16"},{"size":1415,"mtime":1611196235852,"results":"20","hashOfConfig":"16"},{"size":2267,"mtime":1611191159243,"results":"21","hashOfConfig":"16"},{"size":594,"mtime":1611186373009,"results":"22","hashOfConfig":"16"},{"size":1237,"mtime":1611191323992,"results":"23","hashOfConfig":"16"},{"size":2104,"mtime":1611190938080,"results":"24","hashOfConfig":"16"},{"size":690,"mtime":1611191134198,"results":"25","hashOfConfig":"16"},{"size":78,"mtime":1611191701537,"results":"26","hashOfConfig":"16"},{"size":5622,"mtime":1611201534645,"results":"27","hashOfConfig":"16"},{"size":4952,"mtime":1611201701022,"results":"28","hashOfConfig":"16"},{"size":45,"mtime":1611198226173,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"12i3qaf",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Code\\scrumpoker\\src\\index.tsx",[],["63","64"],"D:\\Code\\scrumpoker\\src\\reportWebVitals.ts",[],"D:\\Code\\scrumpoker\\src\\App.tsx",["65","66","67","68","69","70","71","72","73","74","75","76","77"],"import React, { useEffect, useState } from \"react\";\nimport md5 from \"md5\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport \"./App.css\";\nimport {\n  Link,\n  Redirect,\n  Route,\n  Router,\n  Switch,\n  useHistory,\n  useParams,\n} from \"react-router-dom\";\nimport { appHistory, toaster } from \"./init\";\nimport { LoginPage } from \"./login\";\nimport {\n  AuthProvider,\n  getLastSessionId,\n  IUserIdentity,\n  setLastSessionId,\n  useUserIdentity,\n} from \"./auth/context\";\nimport {\n  ControlGroup,\n  InputGroup,\n  Button,\n  Label,\n  Menu,\n  MenuItem,\n  Alignment,\n  Classes,\n  Navbar,\n  AnchorButton,\n  ButtonGroup,\n} from \"@blueprintjs/core\";\nimport styled from \"styled-components\";\nimport { db } from \"./firebase\";\nimport { action, makeObservable, observable, runInAction } from \"mobx\";\nimport { rmdir } from \"fs\";\nimport { observer } from \"mobx-react\";\nimport { SessionUsers } from \"./usersList\";\nimport { Layout, HeaderNav, Content, LeftNav, WorkingArea } from \"./layout\";\nimport { ScrumPokerPage } from \"./scrumPoker\";\nimport { RetroPage } from \"./retro\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router history={appHistory}>\n        <Switch>\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n          <Route path=\"*\">\n            <Application>\n              <Switch>\n                <Route path=\"/sessions/:sessionId\">\n                  <ScrumPokerSession />\n                </Route>\n                <Route path=\"*\">\n                  <SessionRedirect />\n                </Route>\n              </Switch>\n            </Application>\n          </Route>\n        </Switch>\n      </Router>\n      ;\n    </AuthProvider>\n  );\n}\n\nexport default App;\n\nconst Application: React.FC = ({ children }) => {\n  const { user } = useUserIdentity();\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return children as any;\n};\n\nconst ScrumPokerSession: React.FC = () => {\n  const { sessionId } = useParams<{ sessionId: string }>();\n  useEffect(() => {\n    setLastSessionId(sessionId);\n  }, [sessionId]);\n\n  return <ScrumPokerSessionInner key={sessionId} />;\n};\n\nexport function useSessionIdParam() {\n  return (useParams() as { sessionId: string }).sessionId;\n}\n\nconst ScrumPokerSessionInner: React.FC = () => {\n  const sessionId = useSessionIdParam();\n  const history = useHistory();\n  return (\n    <Layout>\n      <HeaderNav>\n        <Navbar>\n          <Navbar.Group align={Alignment.LEFT}>\n            <Navbar.Heading>Scrum Miester</Navbar.Heading>\n            <Navbar.Divider />\n            <Link to=\"/abc\" className=\"bp3-menu-item bp3-icon-layout-circle\">\n              abc\n            </Link>\n            <Link to=\"/good\" className=\"bp3-menu-item bp3-icon-layout-circle\">\n              good\n            </Link>\n          </Navbar.Group>\n        </Navbar>\n      </HeaderNav>\n      <Content>\n        <LeftNav className={Classes.ELEVATION_1}>\n          <SessionUsers />\n          <ul className=\"bp3-menu bp3-list-unstyled\">\n            <li className=\"bp3-menu-header\">\n              <h6 className=\"bp3-heading\">Apps</h6>\n            </li>\n            <li>\n              <Link\n                type=\"button\"\n                to={`/sessions/${sessionId}/scrum-poker`}\n                className=\"bp3-menu-item bp3-icon-ninja\"\n              >\n                Scrum Poker\n              </Link>\n            </li>\n            <li>\n              <Link\n                type=\"button\"\n                to={`/sessions/${sessionId}/retro`}\n                className=\"bp3-menu-item bp3-icon-data-lineage\"\n              >\n                Retro\n              </Link>\n            </li>\n          </ul>\n        </LeftNav>\n        <WorkingArea>\n          <Switch>\n            <Route path=\"/sessions/:sessionId/scrum-poker\">\n              <ScrumPokerPage />\n            </Route>\n            <Route path=\"/sessions/:sessionId/retro\">\n              <RetroPage />\n            </Route>\n            <Route path=\"*\">\n              <div className=\"bp3-non-ideal-state\">\n                <div className=\"bp3-non-ideal-state-visual\">\n                  <span className=\"bp3-icon bp3-icon-folder-open\"></span>\n                </div>\n                <h4 className=\"bp3-heading\">What would you like to do</h4>\n                <div>Scrum Poker or Retro</div>\n                <ButtonGroup>\n                  <Button\n                    icon=\"ninja\"\n                    onClick={() =>\n                      history.push(`/sessions/${sessionId}/scrum-poker`)\n                    }\n                  >\n                    Scrum Poker\n                  </Button>\n                  <Button\n                    icon=\"data-lineage\"\n                    onClick={() => history.push(`/sessions/${sessionId}/retro`)}\n                  >\n                    Retro\n                  </Button>\n                </ButtonGroup>\n              </div>\n            </Route>\n          </Switch>\n        </WorkingArea>\n      </Content>\n    </Layout>\n  );\n};\n\nclass BoundedList<TItem> {\n  count: number;\n  @observable.ref items: TItem[] = [];\n\n  constructor(count: number) {\n    this.count = count;\n    this.items = [];\n  }\n\n  @action.bound\n  add(item: TItem) {\n    if (this.items.length === this.count) {\n      return;\n    }\n    this.items = [...this.items, item];\n  }\n\n  @action.bound\n  remove(item: TItem) {\n    this.items = this.items.filter((e) => e !== item);\n  }\n}\n\nconst SessionRedirect: React.FC = () => {\n  return <JoinSessionPage />;\n};\n\nconst JoinSessionPage: React.FC = () => {\n  const history = useHistory();\n  const [session, setSessionId] = useState(\n    getLastSessionId() || `${Date.now()}`\n  );\n\n  return (\n    <Wrapper>\n      <h1>Join a session</h1>\n      <p>Please enter the session id you want to join</p>\n      <ControlGroup fill={true} vertical={false}>\n        <InputGroup\n          placeholder=\"Session id\"\n          value={session}\n          onChange={(e) => setSessionId(e.target.value)}\n        />\n        <Button icon=\"plus\">Create new</Button>\n      </ControlGroup>\n      <br />\n      <Button\n        onClick={() => {\n          setLastSessionId(session);\n\n          history.push(`/sessions/${session}`);\n        }}\n      >\n        Join\n      </Button>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 460px;\n  padding-top: 100px;\n  padding-bottom: 100px;\n`;\n","D:\\Code\\scrumpoker\\src\\init.tsx",[],"D:\\Code\\scrumpoker\\src\\auth\\context.tsx",[],"D:\\Code\\scrumpoker\\src\\login\\index.tsx",["78","79","80"],"import {\r\n  Button,\r\n  ControlGroup,\r\n  FormGroup,\r\n  InputGroup,\r\n  Label,\r\n} from \"@blueprintjs/core\";\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Async } from \"react-async\";\r\nimport { Redirect, Route, useHistory } from \"react-router-dom\";\r\nimport { setLastSessionId, useUserIdentity } from \"../auth/context\";\r\nimport md5 from \"md5\";\r\n\r\nexport function useQueryStringParam(key: string) {\r\n  return new URLSearchParams(window.location.search.slice(1)).get(key);\r\n}\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const { setUser, user } = useUserIdentity();\r\n  const history = useHistory();\r\n  const sessionId = useQueryStringParam(\"sessionId\");\r\n  const [fullname, setFullname] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [session, setSessionId] = useState(sessionId || \"\");\r\n\r\n  if (user) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ControlGroup fill={true} vertical={false}>\r\n        <LeftLabel>Full Name</LeftLabel>\r\n        <InputGroup\r\n          placeholder=\"Full Name\"\r\n          value={fullname}\r\n          onChange={(e) => setFullname(e.target.value)}\r\n        />\r\n      </ControlGroup>\r\n      <ControlGroup fill={true} vertical={false}>\r\n        <LeftLabel>Email Address</LeftLabel>\r\n        <InputGroup\r\n          placeholder=\"Email address\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </ControlGroup>\r\n      <br />\r\n      <ControlGroup fill={true} vertical={false}>\r\n        <InputGroup\r\n          placeholder=\"Session id\"\r\n          value={session}\r\n          onChange={(e) => setSessionId(e.target.value)}\r\n        />\r\n        <Button icon=\"plus\">Create new</Button>\r\n      </ControlGroup>\r\n      <br />\r\n      <Button\r\n        onClick={() => {\r\n          setLastSessionId(session);\r\n          setUser({ email, fullname, id: md5(email.toLowerCase()) });\r\n\r\n          history.push(`/sessions/${session}`);\r\n        }}\r\n      >\r\n        Join\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 460px;\r\n  padding-top: 100px;\r\n  padding-bottom: 100px;\r\n`;\r\n\r\nconst LeftLabel = styled(Label)`\r\n  width: 100px;\r\n`;\r\n","D:\\Code\\scrumpoker\\src\\firebase\\index.tsx",["81"],"import React from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC-jVBxuXwFgnFpF2l9vryfJTRSji4f2Ko\",\r\n  authDomain: \"scrumpoker-beta.firebaseapp.com\",\r\n  databaseURL:\r\n    \"https://scrumpoker-beta-default-rtdb.europe-west1.firebasedatabase.app\",\r\n  projectId: \"scrumpoker-beta\",\r\n  storageBucket: \"scrumpoker-beta.appspot.com\",\r\n  messagingSenderId: \"442065546523\",\r\n  appId: \"1:442065546523:web:90c0ba98845f2c8254f7be\",\r\n  measurementId: \"G-670Z678GBS\",\r\n};\r\n\r\nconst app = firebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = app.database();\r\n","D:\\Code\\scrumpoker\\src\\usersList\\index.tsx",["82"],"import { Menu, MenuItem } from \"@blueprintjs/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useUserIdentity, IUserIdentity } from \"../auth/context\";\r\nimport { UserListModel } from \"./userListModel\";\r\n\r\nexport const SessionUsers: React.FC = () => {\r\n  const { sessionId } = useParams<{ sessionId: string }>();\r\n  const { user } = useUserIdentity();\r\n  const [userList] = useState(() => new UserListModel());\r\n\r\n  useEffect(() => {\r\n    userList.add(user as IUserIdentity, false);\r\n    return userList.setup(sessionId, user as IUserIdentity);\r\n  }, [userList, user]);\r\n\r\n  return <Users model={userList} />;\r\n};\r\n\r\nconst Users: React.FC<{ model: UserListModel }> = observer(({ model }) => {\r\n  return (\r\n    <Menu>\r\n      <li className=\"bp3-menu-header\">\r\n        <h6 className=\"bp3-heading\">Users</h6>\r\n      </li>\r\n      <UsersInner model={model} />\r\n    </Menu>\r\n  );\r\n});\r\n\r\nconst UsersInner: React.FC<{ model: UserListModel }> = observer(({ model }) => {\r\n  return (\r\n    <>\r\n      {model.users.map((user) => (\r\n        <MenuItem key={user.email} text={user.fullname} icon=\"user\"></MenuItem>\r\n      ))}\r\n    </>\r\n  );\r\n});\r\n","D:\\Code\\scrumpoker\\src\\usersList\\userListModel.tsx",[],"D:\\Code\\scrumpoker\\src\\layout\\index.tsx",[],"D:\\Code\\scrumpoker\\src\\retro\\index.tsx",[],"D:\\Code\\scrumpoker\\src\\scrumPoker\\index.tsx",[],"D:\\Code\\scrumpoker\\src\\scrumPoker\\scrumPokerModel.ts",["83"],"D:\\Code\\scrumpoker\\src\\scrumPoker\\constants.ts",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":11},{"ruleId":"88","severity":1,"message":"92","line":15,"column":22,"nodeType":"90","messageId":"91","endLine":15,"endColumn":29},{"ruleId":"88","severity":1,"message":"93","line":20,"column":3,"nodeType":"90","messageId":"91","endLine":20,"endColumn":16},{"ruleId":"88","severity":1,"message":"94","line":28,"column":3,"nodeType":"90","messageId":"91","endLine":28,"endColumn":8},{"ruleId":"88","severity":1,"message":"95","line":29,"column":3,"nodeType":"90","messageId":"91","endLine":29,"endColumn":7},{"ruleId":"88","severity":1,"message":"96","line":30,"column":3,"nodeType":"90","messageId":"91","endLine":30,"endColumn":11},{"ruleId":"88","severity":1,"message":"97","line":34,"column":3,"nodeType":"90","messageId":"91","endLine":34,"endColumn":15},{"ruleId":"88","severity":1,"message":"98","line":38,"column":10,"nodeType":"90","messageId":"91","endLine":38,"endColumn":12},{"ruleId":"88","severity":1,"message":"99","line":39,"column":18,"nodeType":"90","messageId":"91","endLine":39,"endColumn":32},{"ruleId":"88","severity":1,"message":"100","line":39,"column":46,"nodeType":"90","messageId":"91","endLine":39,"endColumn":57},{"ruleId":"88","severity":1,"message":"101","line":40,"column":10,"nodeType":"90","messageId":"91","endLine":40,"endColumn":15},{"ruleId":"88","severity":1,"message":"102","line":41,"column":10,"nodeType":"90","messageId":"91","endLine":41,"endColumn":18},{"ruleId":"88","severity":1,"message":"103","line":185,"column":7,"nodeType":"90","messageId":"91","endLine":185,"endColumn":18},{"ruleId":"88","severity":1,"message":"104","line":4,"column":3,"nodeType":"90","messageId":"91","endLine":4,"endColumn":12},{"ruleId":"88","severity":1,"message":"105","line":10,"column":10,"nodeType":"90","messageId":"91","endLine":10,"endColumn":15},{"ruleId":"88","severity":1,"message":"106","line":11,"column":20,"nodeType":"90","messageId":"91","endLine":11,"endColumn":25},{"ruleId":"88","severity":1,"message":"107","line":1,"column":8,"nodeType":"90","messageId":"91","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"109","line":16,"column":6,"nodeType":"110","endLine":16,"endColumn":22,"suggestions":"111"},{"ruleId":"88","severity":1,"message":"112","line":6,"column":10,"nodeType":"90","messageId":"91","endLine":6,"endColumn":15},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"@typescript-eslint/no-unused-vars","'md5' is defined but never used.","Identifier","unusedVar","'toaster' is defined but never used.","'IUserIdentity' is defined but never used.","'Label' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'AnchorButton' is defined but never used.","'db' is defined but never used.","'makeObservable' is defined but never used.","'runInAction' is defined but never used.","'rmdir' is defined but never used.","'observer' is defined but never used.","'BoundedList' is defined but never used.","'FormGroup' is defined but never used.","'Async' is defined but never used.","'Route' is defined but never used.","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sessionId'. Either include it or remove the dependency array.","ArrayExpression",["115"],"'clear' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [userList, user, sessionId]",{"range":"118","text":"119"},[657,673],"[userList, user, sessionId]"]